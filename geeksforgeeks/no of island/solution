void find(int i, int j, int n, int m, vector<vector<char>> &grid) {
    grid[i][j] = '0';  // Mark current cell as visited by setting it to '0'

    // Define 8 possible directions (left, right, up, down, and diagonals)
    int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};

    for (int dir = 0; dir < 8; ++dir) {
        int newX = i + dx[dir];
        int newY = j + dy[dir];

        // Check bounds and if the new cell is part of an island
        if (newX >= 0 && newX < n && newY >= 0 && newY < m && grid[newX][newY] == '1') {
            find(newX, newY, n, m, grid);  // Recursively mark the whole island
        }
    }
}

int numIslands(vector<vector<char>>& grid) {
    int n = grid.size();
    if (n == 0) return 0;  // Edge case for empty grid
    int m = grid[0].size();
    int count = 0;

    // Iterate through the grid to find islands
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (grid[i][j] == '1') {
                count++;
                find(i, j, n, m, grid);  // Explore the island and mark all connected parts
            }
        }
    }
    return count;
}
